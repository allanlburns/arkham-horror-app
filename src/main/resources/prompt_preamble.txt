I'm building an app to help me manage the cards in my favorite board game, Arkham Horror. The app will have a Java Spring Boot back end (with PostgreSQL database if necessary) and will eventually use a React front end and possibly a mobile app that interact with the back end.

First a little overview of how the game uses different decks of cards to facilitate the game. The game comes with four scenarios, and there are more scenarios in expansion boxes. The game has a modular board comprised of hexagonal neighborhood tiles with three spaces in each tile, and tiles are connected with smaller "street" tiles. The scenario sheet for the particular scenario you're playing explains which neighborhood tiles to use and in which configuration to place them. The scenario sheet also determines which monster cards to place in the monster deck, which tokens to place in the Mythos Cup, and which Archive Cards to place in the Codex.

A turn of Arkham Horror consists of four phases: 1) Action Phase, during which each player performs two unique actions for their chosen investigator. 2) Monster Phase, when each monster activates by moving, and/or engaging an investigator in the same space, or attacking an investigator the monster is already engaged with. 3) Encounter Phase, in which players not engaged with a monster draw the top card of the corresponding Encounter deck for the space their investigator ended the Action Phase in. 4) Mythos Phase, where each player draws two random tokens from the Mythos Cup that determine further effects to the game.

The biggest complication playing the game is the number of different decks of cards that need to be maintained. Archive Cards are uniquely numbered cards (usually 1-200) that provide goals and conditions that drive the plot of the game. Some cards are used in multiple scenarios, but others can be scenario specific. When an Archive Card is in play, it is said to be in the Codex, a display area for all the active Archive cards. When the conditions for an Archive Card are met, card(s) might be added to or removed from the Archive, or a card might need to be flipped for the text on the reverse to affect the state of the game. Many times the Archive Cards determine what happens when the number of "Doom Tokens" on the scenario sheet hit a certain number (usually an undesired consequence) or alternatively what happens when the
players (investigators) place a desired number of clues on the scenario sheet (a consequence providing a more favorable game play branch). For example, Archive Card #1 states: "If a space has four or more doom, remove three doom from that space. Then place one doom in each other space in that neighborhood and one doom on the scenario sheet." Another Archive Card will explain the consequences of having too many doom on the scenario sheet, or the results of placing a certain number of clues.

Each neighborhood has a deck of eight Encounter Cards that correspond to that neighborhood. The card backs have the name and image of the neighborhood depicted on the tile, and these same cards are used in all the scenarios featuring that particular neighborhood. There are typically five neighborhoods in each scenario, each with a corresponding Encounter Deck plus an Encounter Deck specific to the street connectors between the neighborhood tiles. During the Encounter Phase each player draws a card from the top of the particular neighborhood's Encounter Deck corresponding to where their investigator ended the Action Phase. The player tries to resolve the text on the card. Afterwards, if the card is native to the Encounter Deck it goes on the bottom of the Encounter Deck. If it is an Event Card shuffled into the Encounter Deck (explained in the next paragraph), the card's placement will depend on if the clue was gained.

A particular scenario has a 30-card unique Event Deck that serves several functions. Cards in the Event Deck have images on the back similar to those of the Encounter Decks for a scenario, depicting the image of the associated neighborhood. In order to generate a clue (usually as a result of drawing the "Spawn Clue" Mythos Token during the Mythos Phase), the top card is drawn from the Event Deck, a clue token is placed in the middle of the corresponding neighborhood of that tile, and that Event card is shuffled into the top two cards of the neighborhood's Encounter Deck. When an investigator draws the Event card as part of their Encounter Phase and gains the clue by resolving the card's text, that Event card is removed from the Encounter Deck and placed in the Event Deck discard pile. Alternatively if the investigator draws the Event card but fails to resolve the text, the Event card is placed back on top of its Encounter Deck so the investigators can attempt to gain the clue in the next turn.

The face of the Event cards list the names of all three spaces in that neighborhood, and another primary function of the Event Deck is for the "Spread Doom" mechanic triggered by drawing a "Spread Doom" token from the Mythos Cup. In that case, the bottom card is drawn from the Event Deck and a Doom token is placed on the neighborhood space indicated by the card with a Doom symbol next to the space's name.

Headline cards are a little simpler and are drawn whenever a "Headline" token is pulled from the Mythos cup. The player resolves the text and the card is placed on the bottom of the Headline Deck.

The Monster Deck contains monsters listed on the scenario sheet. A couple of monsters are placed on the board according the setup described on the scenario sheet, and then the remaining monsters are shuffled to be drawn whenever a "Spawn Monster" token is drawn from the Mythos Cup. To spawn a monster when that token is drawn, a player draws the top card of the Monster Deck and places the monster on the space described on the card. Occasionally a specific monster will taken from the Monster Deck when an Archive Card instructs a player to do so, and then the deck will be shuffled again. Whenever a monster is defeated by a player, that monster card is placed on the bottom of the Monster Deck.

With the game overview out of the way, I want to reiterate that I'm building an app to manage the cards, not replicate the functionality of the game in a video game style. I hope to later incorporate a feature to allow players to save the game state because Arkham Horror can take several hours to play, but the immediate goals of the application are to manage these 4-5 different card types.


In general I would like some ideas about how to structure the app at a high level. For instance, I'm going to have Java classes for each card type and each deck type, like Event Deck, Event Card, Encounter Deck, Encounter Card, Monster Deck, Monster Card, etc. I'll have a Card class and Deck class each with the most basic methods for cards and decks, and have each type inherit the appropriate parent class.

Seeing as There are six separate Encounter Decks per scenario, each with eight cards, I'm still not sure how to represent individual cards in the project.